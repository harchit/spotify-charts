{"version":3,"sources":["logo.svg","MapChart.js","App.js","reportWebVitals.js","index.js"],"names":["MapChart","setTooltipContent","useState","data","setData","useEffect","fetch","then","res","json","console","log","ReactTooltip","rebuild","coordinates","zoom","style","maxHeight","height","data-tip","strokeWidth","stroke","step","geography","geographies","map","geo","exists","Object","keys","find","i","properties","ISO_A2","onMouseEnter","NAME","countryData","trackName","artist","Intl","NumberFormat","format","streams","onClick","url","window","open","focus","onMouseLeave","default","fill","outline","hover","cursor","rsmKey","memo","QueryCache","App","content","setContent","className","color","href","html","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAAe,I,uCCuBTA,G,YAAW,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,kBAAuB,EAIfC,mBAAS,IAJM,mBAIhCC,EAJgC,KAI1BC,EAJ0B,KAKvCC,qBAAU,WACIC,MAfA,kGAgBTC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAJ,GAAI,OAAGC,EAAQD,MACpBI,MAAK,SAAAJ,GAAI,OAAEO,QAAQC,IAAIR,MAExBS,IAAaC,YAEd,IAboC,MAePX,mBAAS,CAAEY,YAAa,CAAC,EAAG,GAAIC,KAAM,IAf/B,6BA+BzC,OACE,mCACE,eAAC,gBAAD,CAAeC,MAAO,CAACC,UAAU,QAASC,OAAO,MAAMC,WAAS,GAAhE,UAEE,cAAC,YAAD,CAAWC,YAAa,GAAKC,OAAO,UAAUC,KAAM,CAAC,GAAG,MACxD,cAAC,SAAD,CAAQD,OAAO,UAAUD,YAAa,KACpC,cAAC,cAAD,CAAaG,UA/CrB,yGA+CQ,SACG,qBAAGC,YACUC,KAAI,SAACC,GACf,IAAMC,EAASC,OAAOC,KAAK1B,GAAM2B,MAAK,SAACC,GAAD,OAAMA,IAAML,EAAIM,WAAWC,UACjE,OACA,cAAC,YAAD,CAEEV,UAAWG,EACXQ,aAAc,WAAO,IAAD,EACOR,EAAIM,WAArBG,EADU,EACVA,KAAMF,EADI,EACJA,OACd,GAAGN,EAAO,CACNf,IAAaC,UACb,IAAMuB,EAAcjC,EAAK8B,GACzBhC,EAAkB,GAAD,OACbkC,EADa,iDAERC,EAAYC,UAFJ,mDAGND,EAAYE,OAHN,4DAIGC,KAAKC,eAAeC,OAAOL,EAAYM,SAJ1C,QAOvBC,QAAS,WAEL,GAAIhB,EAAO,CAAC,IACDiB,EAAOzC,EAAKuB,EAAIM,WAAWC,QAA3BW,IACGC,OAAOC,KAAKF,EAAK,UACzBG,UAGVC,aAAc,WACZ/C,EAAkB,KAGpBmB,YAAa,GACbC,OAAO,UACPL,MAAO,CACLiC,QAAS,CACPC,KAAMvB,EAAQ,UAAU,OACxBwB,QAAS,UAGXC,MAAO,CACLF,KAAMvB,EAAQ,UAAW,OACzBwB,QAAS,OACTE,OAAQ1B,EAAQ,UAAW,UArC1BD,EAAI4B,qBAkDZC,iBAAKvD,GC7FD,IAAIwD,IA0BRC,MAxBf,WAAgB,IAAD,EACiBvD,mBAAS,IAD1B,mBACNwD,EADM,KACGC,EADH,KAGb,OAGE,cAFA,CAEA,OAAKC,UAAU,MAAf,UACI,oBAAI5C,MAAO,CAAC6C,MAAO,WAAnB,6CACA,oBAAG7C,MAAO,CAAC6C,MAAO,SAAlB,iEAAgF,uBAAhF,qBAEK,cAAC,EAAD,CAAUD,UAAU,MAAM3D,kBAAmB0D,IAClD,sBAAMC,UAAU,KAAhB,0CACA,uBAAM5C,MAAO,CAAC6C,MAAO,SAArB,wBAA2C,IACzC,mBAAG7C,MAAO,CAAC6C,MAAO,aAAcC,KAAK,uDAArC,2BAIF,cAAC,IAAD,CAAcC,MAAM,EAApB,SAA2BL,QC9BpBM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3D,MAAK,YAAkD,IAA/C4D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b19682ab.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { memo, useEffect, useState } from \"react\";\r\nimport {useQuery} from 'react-query';\r\nimport {\r\n  ZoomableGroup,\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n  Graticule,\r\n  Sphere\r\n} from \"react-simple-maps\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\nconst chartsURL = 'https://raw.githubusercontent.com/wobsoriano/spotify-charts-map/master/data/spotifycharts.json';\r\n//   const fetchCountries = async () =>{\r\n//     const res = await fetch('https://raw.githubusercontent.com/wobsoriano/spotify-charts-map/master/data/spotifycharts.json');\r\n//     return res.json();\r\n// }\r\n\r\n \r\n\r\n\r\nconst MapChart = ({ setTooltipContent}) => {\r\n\r\n    //const {isLoading, data} = useQuery('repoData', fetchCountries);\r\n    //console.log(\"printed \" + data);\r\n    const [data, setData] = useState('');\r\n    useEffect(()=>{\r\n        const d = fetch(chartsURL)\r\n        .then(res=>res.json())\r\n        .then(data=> setData(data))\r\n        .then(data=>console.log(data));\r\n\r\n        ReactTooltip.rebuild();\r\n        \r\n    }, []);  \r\n\r\n    const [position, setPosition] = useState({ coordinates: [0, 0], zoom: 1 });\r\n\r\n  function handleZoomIn() {\r\n    if (position.zoom >= 4) return;\r\n    setPosition(pos => ({ ...pos, zoom: pos.zoom * 2 }));\r\n  }\r\n\r\n  function handleZoomOut() {\r\n    if (position.zoom <= 1) return;\r\n    setPosition(pos => ({ ...pos, zoom: pos.zoom / 2 }));\r\n  }\r\n\r\n  function handleMoveEnd(position) {\r\n    setPosition(position);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ComposableMap style={{maxHeight:\"84vh\"}} height=\"500\" data-tip=\"\" >\r\n        \r\n        <Graticule strokeWidth={0.5} stroke=\"#FFFFFF\" step={[15,15]}/>\r\n        <Sphere stroke=\"#FFFFFF\" strokeWidth={0.5}/>\r\n          <Geographies geography={geoUrl}>\r\n            {({ geographies }) =>\r\n              geographies.map((geo) => {\r\n                const exists = Object.keys(data).find((i)=> i === geo.properties.ISO_A2); \r\n                return ( \r\n                <Geography\r\n                  key={geo.rsmKey}\r\n                  geography={geo}\r\n                  onMouseEnter={() => {\r\n                    const { NAME, ISO_A2 } = geo.properties; \r\n                    if(exists){\r\n                        ReactTooltip.rebuild();\r\n                        const countryData = data[ISO_A2];\r\n                        setTooltipContent(\r\n                         `${NAME}<br/>\r\n                         Song: ${countryData.trackName}<br/>\r\n                         Artist: ${countryData.artist}<br/>\r\n                         Today's Streams: ${Intl.NumberFormat().format(countryData.streams)} `);\r\n                    }   \r\n                  }}\r\n                  onClick={()=>{\r\n                      \r\n                      if (exists){\r\n                          const {url} = data[geo.properties.ISO_A2];\r\n                          const w = window.open(url, \"_blank\");\r\n                          w.focus();\r\n                      }\r\n                  }}\r\n                  onMouseLeave={() => {\r\n                    setTooltipContent('');\r\n                  }}\r\n                  \r\n                  strokeWidth={0.4}\r\n                  stroke=\"#000000\"\r\n                  style={{\r\n                    default: {\r\n                      fill: exists? \"#1ED760\":\"#000\" ,\r\n                      outline: \"000000\",\r\n                \r\n                    },\r\n                    hover: {\r\n                      fill: exists? \"#1ce865\": \"#000\",\r\n                      outline: \"none\",\r\n                      cursor: exists? \"pointer\": \"auto\"\r\n                    },\r\n                  }}\r\n                />\r\n                );\r\n            })\r\n            }\r\n          </Geographies>\r\n      </ComposableMap>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(MapChart);\r\n","import logo from './logo.svg';\nimport React from 'react';\nimport {useState} from 'react';\nimport {composableMap, Graticule, ZoomableGroup, Annotation} from 'react-simple-maps';\nimport './App.css';\nimport ReactTooltip from 'react-tooltip';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'; \nimport {Button, Popover} from 'react-bootstrap';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport {useQuery, ReactQueryCacheProvider, QueryCache} from 'react-query';\nimport Loader from './Loader'\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Sphere\n} from \"react-simple-maps\"\nimport { PopoverContent } from 'react-bootstrap';\nimport * as fetch from 'node-fetch';\nimport MapChart from './MapChart';\n\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\"\nconst queryCache = new QueryCache();\n\nfunction App() {\n  const [content, setContent] = useState(\"\");\n \n  return (\n    //<ReactQueryCacheProvider queryCache={queryCache}>\n\n    <div className=\"App\">\n        <h3 style={{color: \"#1ED760\"}}> Top Spotify Tracks by Country </h3>\n        <t style={{color: \"white\"}}> Hover over country to view top daily spotify track <br/> click to view </t>\n        \n          {  <MapChart className=\"map\" setTooltipContent={setContent} />}\n        <span className=\"me\"> created by Harchit Bhatoia </span>\n        <span style={{color: \"white\"}}> powered by{\" \"}    \n          <a style={{color: \"lightblue\"}} href=\"https://developer.spotify.com/documentation/web-api/\">\n            spotifyAPI\n          </a>\n        </span>\n        <ReactTooltip html={true}>{content}</ReactTooltip>\n    </div>\n\n    //</ReactQueryCacheProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}